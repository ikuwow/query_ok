---
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.2
  slack: circleci/slack@4.4.2

executors:
  default:
    working_directory: ~/project
    docker:
      - image: circleci/ruby:2.6.6-node
    environment:
      BUNDLE_APP_CONFIG: ~/project/.bundle/

commands:
  bundle_install:
    steps:
      - run:
          name: Update bundler to latest
          command: |
            gem update bundler
            bundle --version
      - run:
          name: bundle config
          command: |
            bundle config set --local frozen true
            bundle config set --local path vendor/bundle
            bundle config set --local clean true
      - restore_cache:
          keys:
            - bundler-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - bundler-{{ .Branch }}
            - bundler-master
      - run: bundle install
      - save_cache:
          key: bundler-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  npm_install:
    steps:
      - restore_cache:
          keys:
            - npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v2-{{ .Branch }}
            - npm-v2-master
      - run: npm install
      - save_cache:
          key: npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

jobs:
  lint:
    executor:
      name: default
    steps:
      - checkout
      - bundle_install
      - npm_install
      - run:
          command: bundle exec rubocop
          when: always
      - run:
          command: bundle exec erblint source/**/*.erb
          when: always
      - run:
          command: bundle exec mdl source/
          when: always
      - run:
          command: npm run eslint
          when: always
      - run:
          command: npm run stylelint
          when: always
      - run:
          command: npx textlint source/posts/
          when: always
  build:
    executor:
      name: default
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - bundle_install
      - npm_install
      - restore_cache:
          keys:
            - articles-{{ .Branch }}-{{ .Revision }}
            - articles-{{ .Branch }}
      - run:
          name: Build static pages
          command: bundle exec middleman build
      - save_cache:
          key: articles-{{ .Branch }}-{{ .Revision }}
          paths:
            - build
      - persist_to_workspace:
          root: ~/project
          paths:
            - vendor/bundle
            - build
            - Gemfile.lock
  deploy:
    executor:
      name: default
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - bundle_install
      - npm_install
      - aws-cli/install
      - deploy:
          name: deploy to s3
          command: bundle exec middleman s3_sync
      - deploy:
          name: Invalidate Cloudfront Caches
          command: |
            echo "Distribution ID: ${CLOUDFRONT_DISTRIBUTION_ID}"
            aws cloudfront create-invalidation \
              --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
              --paths "/*"


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - lint
      - deploy:
          context: slack-notification
          filters:
            branches:
              only:
                - master
          requires:
            - build
            - lint
          post-steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
            - slack/notify:
                event: pass
                template: success_tagged_deploy_1
